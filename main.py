import telebot
import requests
import json
import re

NOVA_POSHTA_API_KEY = "cb589626abe2488ac0bd2c750419a496"
TELEGRAM_BOT_TOKEN = "7840803477:AAFql7Ppyk9bQ8RQI7uoSLnEFvahRpjQkV0"

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

def get_city_ref(city_name):
    """Get city reference by name"""
    payload = {
        "apiKey": NOVA_POSHTA_API_KEY,
        "modelName": "Address",
        "calledMethod": "searchSettlements",
        "methodProperties": {
            "CityName": city_name,
            "Limit": 1
        }
    }
    response = requests.post("https://api.novaposhta.ua/v2.0/json/", json=payload)
    data = response.json()
    if data.get('success') and data['data'][0]['Addresses']:
        return data['data'][0]['Addresses'][0]['Ref']
    return None

def get_warehouse_ref(city_ref, warehouse_number):
    """Get warehouse reference by city and number"""
    payload = {
        "apiKey": NOVA_POSHTA_API_KEY,
        "modelName": "Address",
        "calledMethod": "getWarehouses",
        "methodProperties": {
            "CityRef": city_ref,
            "Page": 1,
            "Limit": 50,
            "Language": "ru"
        }
    }
    response = requests.post("https://api.novaposhta.ua/v2.0/json/", json=payload)
    data = response.json()
    if data.get('success'):
        for warehouse in data['data']:
            if str(warehouse_number) in warehouse['Description']:
                return warehouse['Ref']
    return None

def get_counterparty_ref(phone, counterparty_property):
    """Get counterparty reference by phone"""
    payload = {
        "apiKey": NOVA_POSHTA_API_KEY,
        "modelName": "Counterparty",
        "calledMethod": "getCounterparties",
        "methodProperties": {
            "CounterpartyProperty": counterparty_property,
            "FindByString": phone
        }
    }
    response = requests.post("https://api.novaposhta.ua/v2.0/json/", json=payload)
    data = response.json()
    if data.get('success') and data['data']:
        return data['data'][0]['Ref']
    return None

def parse_ttn_data(message_text):
    """Parse TTN data from message text"""
    data = {}
    
    # Regular expressions for data extraction
    patterns = {
        'sender_name': r'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\s*(.+)',
        'sender_phone': r'–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\s*(\+?\d+)',
        'sender_city': r'–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\s*(.+)',
        'sender_branch': r'–û—Ç–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\s*(\d+)',
        'recipient_name': r'–ü–æ–ª—É—á–∞—Ç–µ–ª—å:\s*(.+)',
        'recipient_phone': r'–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\s*(\+?\d+)',
        'recipient_city': r'–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\s*(.+)',
        'recipient_branch': r'–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\s*(\d+)',
        'seats': r'–ú–µ—Å—Ç:\s*(\d+)',
        'weight': r'–í–µ—Å:\s*(\d+(?:\.\d+)?)',
        'payer_type': r'–ü–ª–∞—Ç–µ–ª—å—â–∏–∫:\s*(–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å|–ü–æ–ª—É—á–∞—Ç–µ–ª—å)',
        'cost': r'–°—Ç–æ–∏–º–æ—Å—Ç—å:\s*(\d+(?:\.\d+)?)',
        'cargo_description': r'–û–ø–∏—Å–∞–Ω–∏–µ:\s*(.+)'
    }
    
    for key, pattern in patterns.items():
        match = re.search(pattern, message_text, re.IGNORECASE | re.MULTILINE)
        if match:
            data[key] = match.group(1).strip()
    
    return data

def create_ttn(data):
    # Get reference IDs
    sender_city_ref = get_city_ref(data["sender_city"])
    recipient_city_ref = get_city_ref(data["recipient_city"])
    
    if not sender_city_ref or not recipient_city_ref:
        return {"success": False, "errors": ["–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"]}

    sender_warehouse_ref = get_warehouse_ref(sender_city_ref, data["sender_branch"])
    recipient_warehouse_ref = get_warehouse_ref(recipient_city_ref, data["recipient_branch"])
    
    if not sender_warehouse_ref or not recipient_warehouse_ref:
        return {"success": False, "errors": ["–û—Ç–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]}

    sender_ref = get_counterparty_ref(data["sender_phone"], "Sender")
    recipient_ref = get_counterparty_ref(data["recipient_phone"], "Recipient")
    
    if not sender_ref or not recipient_ref:
        return {"success": False, "errors": ["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"]}

    payload = {
        "apiKey": NOVA_POSHTA_API_KEY,
        "modelName": "InternetDocument",
        "calledMethod": "save",
        "methodProperties": {
            "PayerType": "Recipient" if data["payer_type"].lower() == "–ø–æ–ª—É—á–∞—Ç–µ–ª—å" else "Sender",
            "PaymentMethod": "Cash",
            "CargoType": "Cargo",
            "VolumeGeneral": "0.1",
            "Weight": str(data["weight"]),
            "ServiceType": "WarehouseWarehouse",
            "SeatsAmount": str(data["seats"]),
            "Description": data["cargo_description"],
            "Cost": str(data["cost"]),
            "CitySender": sender_city_ref,
            "Sender": sender_ref,
            "SenderAddress": sender_warehouse_ref,
            "ContactSender": sender_ref,
            "SendersPhone": data["sender_phone"],
            "CityRecipient": recipient_city_ref,
            "Recipient": recipient_ref,
            "RecipientAddress": recipient_warehouse_ref,
            "ContactRecipient": recipient_ref,
            "RecipientsPhone": data["recipient_phone"]
        }
    }

    response = requests.post("https://api.novaposhta.ua/v2.0/json/", json=payload)
    return response.json()

@bot.message_handler(commands=['start'])
def start(message):
    instructions = """
üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ù–æ–≤–æ–π –ü–æ—á—Ç—ã üì¶

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–¢–ù –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: +380501234567
–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: –ö–∏–µ–≤
–û—Ç–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: 1

–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤
–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: +380671234567
–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –û–¥–µ—Å—Å–∞
–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: 2

–ú–µ—Å—Ç: 1
–í–µ—Å: 2.5
–ü–ª–∞—Ç–µ–ª—å—â–∏–∫: –ü–æ–ª—É—á–∞—Ç–µ–ª—å
–°—Ç–æ–∏–º–æ—Å—Ç—å: 500
–û–ø–∏—Å–∞–Ω–∏–µ: –û–¥–µ–∂–¥–∞

‚ùóÔ∏è –í–∞–∂–Ω–æ:
- –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +380XXXXXXXXX
- –ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏
- –ü–ª–∞—Ç–µ–ª—å—â–∏–∫: —É–∫–∞–∂–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" –∏–ª–∏ "–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
- –í–µ—Å —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
- –°—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –≥—Ä–∏–≤–Ω–∞—Ö
"""
    bot.send_message(message.chat.id, instructions)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        # Parse message text to extract data
        data = parse_ttn_data(message.text)
        
        # Validate required fields
        required_fields = [
            "sender_name", "sender_phone", "sender_city", "sender_branch",
            "recipient_name", "recipient_phone", "recipient_city", "recipient_branch",
            "seats", "weight", "payer_type", "cost", "cargo_description"
        ]
        
        missing_fields = [field for field in required_fields if not data.get(field)]
        if missing_fields:
            missing_fields_ru = {
                "sender_name": "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                "sender_phone": "–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                "sender_city": "–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                "sender_branch": "–û—Ç–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
                "recipient_name": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å",
                "recipient_phone": "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                "recipient_city": "–ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                "recipient_branch": "–û—Ç–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                "seats": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç",
                "weight": "–í–µ—Å",
                "payer_type": "–ü–ª–∞—Ç–µ–ª—å—â–∏–∫",
                "cost": "–°—Ç–æ–∏–º–æ—Å—Ç—å",
                "cargo_description": "–û–ø–∏—Å–∞–Ω–∏–µ"
            }
            missing_fields_names = [missing_fields_ru[field] for field in missing_fields]
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\n" + "\n".join(f"- {field}" for field in missing_fields_names)
            )
            return

        # Create TTN
        ttn = create_ttn(data)
        if ttn.get('success'):
            success_message = f"""
‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üìù –ù–æ–º–µ—Ä –¢–¢–ù: {ttn['data'][0]['IntDocNumber']}
üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {data['sender_name']}
üìç –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {data['sender_city']}
üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {data['sender_branch']}

üì¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {data['recipient_name']}
üìç –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {data['recipient_city']}
üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {data['recipient_branch']}

üì¶ –ú–µ—Å—Ç: {data['seats']}
‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['cost']} –≥—Ä–Ω
"""
            bot.send_message(message.chat.id, success_message)
        else:
            errors = ttn.get('errors', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'])
            bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–¢–ù:\n" + "\n".join(f"- {error}" for error in errors)
            )
    
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:\n{str(e)}"
        )

if __name__ == "__main__":
    bot.polling()
