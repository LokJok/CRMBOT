import telebot
import requests
import json

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –æ—Ç –ù–æ–≤–æ–π –ü–æ—á—Ç—ã
NOVA_POSHTA_API_KEY = "cb589626abe2488ac0bd2c750419a496"
# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7840803477:AAFql7Ppyk9bQ8RQI7uoSLnEFvahRpjQkV0"

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–¢–ù —á–µ—Ä–µ–∑ API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã
def create_ttn(data):
    url = "https://api.novaposhta.ua/v2.0/json/"
    payload = {
        "apiKey": NOVA_POSHTA_API_KEY,
        "modelName": "InternetDocument",
        "calledMethod": "save",
        "methodProperties": {
            "Sender": {
                "Name": data["sender_name"],  # –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                "ContactPerson": data["sender_name"],  # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
                "Phone": data["sender_phone"],  # –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                "City": data["sender_city"],  # –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                "Address": data["sender_branch"],  # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ—Ç–¥–µ–ª–µ–Ω–∏–µ)
            },
            "Recipient": {
                "Name": data["recipient_name"],  # –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                "ContactPerson": data["recipient_name"],  # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
                "Phone": data["recipient_phone"],  # –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                "City": data["recipient_city"],  # –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                "Address": data["recipient_branch"],  # –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–æ—Ç–¥–µ–ª–µ–Ω–∏–µ)
            },
            "CargoType": "Parcel",  # –¢–∏–ø –≥—Ä—É–∑–∞
            "SeatsAmount": data["seats"],  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
            "Weight": data["weight"],  # –í–µ—Å
            "ServiceType": "WarehouseWarehouse",  # –¢–∏–ø —É—Å–ª—É–≥–∏
            "PaymentMethod": "Cash",  # –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            "Cost": data["cost"],  # –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            "CashOnDelivery": data["cash_on_delivery"],  # –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        }
    }

    response = requests.post(url, json=payload)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print("API Response:", response.json())  # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –≤ —á–µ–º –æ—à–∏–±–∫–∞
    
    return response.json()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –∑–∞—è–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–¢–ù.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_order(message):
    try:
        # –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞—è–≤–∫–∏:
        # üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
        # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
        # –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: +380501234567
        # –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: –ö–∏–µ–≤
        # –û—Ç–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: 1
        # –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤
        # –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: +380671234567
        # –ì–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –û–¥–µ—Å—Å–∞
        # –û—Ç–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: 2
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: 1
        # –í–µ—Å (–∫–≥): 2
        # –û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 500
        # –ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂: 500
        # –û–ø–ª–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É: –ü–æ–ª—É—á–∞—Ç–µ–ª—å

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
        data = {
            "sender_name": message.text.split("\n")[1].split(": ")[1],
            "sender_phone": message.text.split("\n")[2].split(": ")[1],
            "sender_city": message.text.split("\n")[3].split(": ")[1],
            "sender_branch": message.text.split("\n")[4].split(": ")[1],
            
            "recipient_name": message.text.split("\n")[5].split(": ")[1],
            "recipient_phone": message.text.split("\n")[6].split(": ")[1],
            "recipient_city": message.text.split("\n")[7].split(": ")[1],
            "recipient_branch": message.text.split("\n")[8].split(": ")[1],
            
            "seats": int(message.text.split("\n")[9].split(": ")[1]),
            "weight": float(message.text.split("\n")[10].split(": ")[1]),
            "cost": float(message.text.split("\n")[11].split(": ")[1]),
            "cash_on_delivery": float(message.text.split("\n")[12].split(": ")[1]),
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–¢–ù
        response = create_ttn(data)
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏
        if response.get("success"):
            ttn_number = response["data"][0]["DocumentNumber"]
            bot.send_message(message.chat.id, f"–¢–¢–ù —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –ù–æ–º–µ—Ä –¢–¢–ù: {ttn_number}")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¢–¢–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
